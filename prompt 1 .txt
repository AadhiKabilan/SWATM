app.py: import pyodbc
from flask import Flask, request, render_template, redirect, url_for, session, jsonify
import random

app = Flask(__name__)
app.secret_key = 'your_secret_key'

# Database connection string
def get_db_connection():
    return pyodbc.connect(
        'DSN=OracleDSN1;'
        'UID=Aadhi;'
        'PWD=123;'
    )

# Login route
@app.route('/')
def login():
    return render_template('login.html')

@app.route('/login', methods=['POST'])
def handle_login():
    username = request.form['username']
    password = request.form['password']
    connection = get_db_connection()
    cursor = connection.cursor()

    # Check login
    cursor.execute("SELECT * FROM students_s WHERE username_s=? AND password_s=?", (username, password))
    user = cursor.fetchone()
    if user:
        session['username'] = username
        if user[-1] == 'staff':
            return redirect(url_for('staff_page'))
        else:
            return redirect(url_for('student_page'))
    else:
        return "Invalid credentials, please try again."

# Sign-in route
@app.route('/sign_in')
def sign_in():
    return render_template('sign_in.html')

@app.route('/sign_in', methods=['POST'])
def handle_sign_in():
    usertype = request.form['usertype']
    connection = None
    try:
        connection = get_db_connection()
        cursor = connection.cursor()

        if usertype == 'staff':
            reg_no = random.randint(1000000000, 2000000000)
            username = request.form['username']
            password = request.form['password']

            # Check for existing REG_NO_S
            cursor.execute("SELECT COUNT(*) FROM students_s WHERE REG_NO_S = ?", (reg_no,))
            if cursor.fetchone()[0] > 0:
                return f"Error: REG_NO_S {reg_no} already exists."

            # Check for existing USERNAME_S
            cursor.execute("SELECT COUNT(*) FROM students_s WHERE USERNAME_S = ?", (username,))
            if cursor.fetchone()[0] > 0:
                return f"Error: USERNAME_S {username} already exists."

            # Validate data
            if not username or not password:
                return "Error: Username and Password are required."

            # Insert new staff record
            cursor.execute(
                "INSERT INTO students_s (REG_NO_S, USERNAME_S, PASSWORD_S, USERTYPE) VALUES (?, ?, ?, ?)",
                (reg_no, username, password, usertype)
            )
            connection.commit()
            return f"Staff registered successfully with REG_NO: {reg_no}"

        elif usertype == 'student':
            reg_no = request.form['reg_no']
            username = request.form['username']
            password = request.form['password']

            # Check for required fields
            if not reg_no or not username or not password:
                return "Error: REG_NO_S, Username, and Password are required."

           

            cursor.execute("SELECT COUNT(*) FROM students_s WHERE REG_NO_S = ?", (reg_no))
            exists = cursor.fetchone()[0] > 0

            if exists:
        # Update existing record
                cursor.execute(
                 """
                 UPDATE students_s 
                 SET USERNAME_S = ?, PASSWORD_S = ? 
                 WHERE REG_NO_S = ?
                 """,
                (username, password, reg_no)
                )
                connection.commit()
                return f"Record updated for REG_NO_S: {reg_no}"
            else:
        # Insert new student record
                return "Register Number Doesn't Exist"

        else:
            return "Invalid user type."

    except pyodbc.Error as e:
        print("Database Error:", e)
        return f"A database error occurred: {e}"
    finally:
        if connection:
            connection.close()

# Student Page
@app.route('/student')
def student_page():
    if 'username' not in session:
        return redirect(url_for('login'))
    username = session['username']
    connection = get_db_connection()
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM students_s WHERE username_s=?", (username,))
    student_details = cursor.fetchone()
    return render_template('student.html', student=student_details)

# Staff Page
@app.route('/staff')
def staff_page():
    if 'username' not in session:
        return redirect(url_for('login'))
    connection = get_db_connection()
    cursor = connection.cursor()
    cursor.execute("SELECT REG_NO_s, NAME_s, AGE_s, BRANCH_s, EMAIL_ID_s, phonenumber_s, semester_s FROM students_s WHERE usertype='student' ORDER BY REG_NO_S ASC")
    students = cursor.fetchall()
    return render_template('staff.html', students=students)

# Load data from students_s to buffer_students
@app.route('/load_data', methods=['POST'])
def load_data():
    """
    Load all records with usertype='student' from students_s into buffer_students.
    """
    try:
        connection = get_db_connection()
        cursor = connection.cursor()

        # Clear the buffer_students table
        cursor.execute("DELETE FROM buffer_students")
        cursor.execute("COMMIT")

        # Insert only records with usertype='student' into buffer_students
        cursor.execute("""
            INSERT INTO buffer_students (REG_NO_b, NAME_b, AGE_b, BRANCH_b, EMAIL_ID_b, phonenumber_b, semester_b)
            SELECT REG_NO_s, NAME_s, AGE_s, BRANCH_s, EMAIL_ID_s, phonenumber_s, semester_s
            FROM students_s
            WHERE usertype = 'student'
        """)
        cursor.execute("COMMIT")

        return "Buffer loaded with student records successfully."
    except Exception as e:
        return jsonify({"error": str(e)}), 500
    finally:
        connection.close()

@app.route('/insert_or_update_buffer', methods=['POST'])
def insert_or_update_buffer():
    """
    Insert or update multiple records in buffer_students table.
    Expects JSON array of student records.
    """
    try:
        connection = get_db_connection()
        cursor = connection.cursor()
        data = request.json

        # Loop through each student record
        for student in data:
            cursor.execute("""
                MERGE INTO buffer_students b
                USING (SELECT ? AS reg_no, ? AS name, ? AS age, ? AS branch, ? AS email, ? AS phone, ? AS semester FROM dual) new_data
                ON (b.REG_NO_b = new_data.reg_no)
                WHEN MATCHED THEN
                    UPDATE SET
                        NAME_b = new_data.name,
                        AGE_b = new_data.age,
                        BRANCH_b = new_data.branch,
                        EMAIL_ID_b = new_data.email,
                        phonenumber_b = new_data.phone,
                        semester_b = new_data.semester
                WHEN NOT MATCHED THEN
                    INSERT (REG_NO_b, NAME_b, AGE_b, BRANCH_b, EMAIL_ID_b, phonenumber_b, semester_b)
                    VALUES (new_data.reg_no, new_data.name, new_data.age, new_data.branch, new_data.email, new_data.phone, new_data.semester)
            """, (
                student["reg_no"],
                student["name"],
                student["age"],
                student["branch"],
                student["email"],
                student["phone"],
                student["semester"],
            ))

        connection.commit()
        return "Records inserted/updated in buffer successfully."
    except Exception as e:
        return jsonify({"error": str(e)}), 500
    finally:
        connection.close()


@app.route('/fetch_buffer', methods=['GET'])
def fetch_buffer():
    """
    Fetch all records from the buffer_students table.
    Returns:
        JSON response containing all student records.
    """
    try:
        connection = get_db_connection()
        cursor = connection.cursor()

        # Fetch all records from buffer_students
        cursor.execute("""
            SELECT REG_NO_b, NAME_b, AGE_b, BRANCH_b, EMAIL_ID_b, phonenumber_b, semester_b 
            FROM buffer_students
        """)
        rows = cursor.fetchall()

        # Convert rows to a list of dictionaries
        students = [
            {
                "reg_no": row[0],
                "name": row[1],
                "age": row[2],
                "branch": row[3],
                "email": row[4],
                "phone": row[5],
                "semester": row[6],
            }
            for row in rows
        ]

        # Return data as JSON
        return jsonify(students)

    except Exception as e:
        return jsonify({"error": str(e)}), 500

    finally:
        connection.close()
# Fetch a specific record by register number
@app.route('/fetch_record', methods=['GET'])
def fetch_record():
    reg_no = request.args.get('reg_no')
    try:
        connection = get_db_connection()
        cursor = connection.cursor()
        cursor.execute("SELECT * FROM buffer_students WHERE REG_NO_b = ?", (reg_no,))
        record = cursor.fetchone()

        if record:
            return jsonify({
                "reg_no": record[0],
                "name": record[1],
                "age": record[2],
                "branch": record[3],
                "email": record[4],
                "phone": record[5],
                "semester": record[6]
            })
        else:
            return "Record not found.", 404
    except Exception as e:
        return f"An error occurred: {e}"
    finally:
        connection.close()

# Insert a new record into buffer_students
@app.route('/insert_record', methods=['POST'])
def insert_record():
    try:
        data = request.json
        connection = get_db_connection()
        cursor = connection.cursor()

        cursor.execute("""
            INSERT INTO buffer_students 
            (REG_NO_b, NAME_b, AGE_b, BRANCH_b, EMAIL_ID_b, phonenumber_b, semester_b) 
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (data['reg_no'], data['name'], data['age'], data['branch'], data['email'], data['phone'], data['semester']))
        cursor.execute("COMMIT")

        return "Record inserted successfully."
    except Exception as e:
        return f"An error occurred: {e}"
    finally:
        connection.close()

# Commit data from buffer_students to students_s
@app.route('/commit_data', methods=['POST'])
def commit_data():
    """
    Commit all records from buffer_students to students_s.
    Update existing records, insert new ones, and delete records marked for deletion.
    """
    try:
        connection = get_db_connection()
        cursor = connection.cursor()

        # Get the list of deleted records from the frontend
        deleted_records = request.json.get('deleted_records', [])

        # Delete records from students_s if they exist and usertype='student'
        for reg_no in deleted_records:
            cursor.execute("""
                DELETE FROM students_s
                WHERE REG_NO_s = ? AND usertype = 'student'
            """, (reg_no,))

        # Update existing records and insert new ones from buffer_students
        cursor.execute("""
            MERGE INTO students_s s
            USING buffer_students b
            ON (s.REG_NO_s = b.REG_NO_b)
            WHEN MATCHED THEN
                UPDATE SET
                    NAME_s = b.NAME_b,
                    AGE_s = b.AGE_b,
                    BRANCH_s = b.BRANCH_b,
                    EMAIL_ID_s = b.EMAIL_ID_b,
                    phonenumber_s = b.phonenumber_b,
                    semester_s = b.semester_b
            WHEN NOT MATCHED THEN
                INSERT (REG_NO_s, NAME_s, AGE_s, BRANCH_s, EMAIL_ID_s, phonenumber_s, semester_s, usertype)
                VALUES (b.REG_NO_b, b.NAME_b, b.AGE_b, b.BRANCH_b, b.EMAIL_ID_b, b.phonenumber_b, b.semester_b, 'student')
        """)
        
        # Commit changes
        connection.commit()

        return "Changes committed successfully, including deletions."
    except Exception as e:
        return jsonify({"error": str(e)}), 500
    finally:
        connection.close()

@app.route('/delete_record', methods=['POST'])
def delete_record():
    """
    Delete a specific record from buffer_students table
    """
    try:
        data = request.json
        reg_no = data.get('reg_no')
        
        if not reg_no:
            return jsonify({"error": "No registration number provided"}), 400
        
        connection = get_db_connection()
        cursor = connection.cursor()
        
        # Delete the specific record from buffer_students
        cursor.execute("DELETE FROM buffer_students WHERE REG_NO_b = ?", (reg_no,))
        connection.commit()
        
        return jsonify({"message": "Record deleted successfully"}), 200
    
    except Exception as e:
        return jsonify({"error": str(e)}), 500
    finally:
        if connection:
            connection.close()
            
@app.route('/data_entry', methods=['GET'])
def data_entry():
    return render_template('data_entry.html')

@app.route('/change_password', methods=['GET', 'POST'])
def change_password():
    # Ensure the user is logged in
    if 'username' not in session:
        return redirect(url_for('login'))

    if request.method == 'POST':
        current_password = request.form['current_password']
        new_password = request.form['new_password']
        confirm_password = request.form['confirm_password']
        username = session['username']

        # Check if the current password is correct
        if not check_current_password(username, current_password):
            return "Current password is incorrect."

        # Check if the new password matches the confirmation
        if new_password != confirm_password:
            return "New passwords do not match."

        # Update the password in the database
        update_password(username, new_password)
        return "Password successfully changed."

    return render_template('change_password.html')

def check_current_password(username, current_password):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "SELECT password_s FROM students_s WHERE username_s = ?", 
        (username,)
    )
    stored_password = cursor.fetchone()
    conn.close()
    return stored_password and stored_password[0] == current_password

def update_password(username, new_password):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE students_s SET password_s = ? WHERE username_s = ?",
        (new_password, username)
    )
    conn.commit()
    conn.close()
@app.route('/logout')
def logout():
    # Clear the session to log the user out
    session.pop('student_id', None)  # Remove the student ID from the session

    # Redirect the user to the login page
    return redirect(url_for('login')) 

if __name__ == '__main__':
    app.run(debug=True)








data_entry.html:<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Data Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gradient-to-r from-green-100 to-blue-100 min-h-screen text-gray-900">
    <div class="container mx-auto p-4">
        <!-- Header Section -->
        <header class="bg-green-600 text-white py-6 rounded-lg shadow-md">
            <h1 class="text-center text-3xl font-bold">Student Data Management</h1>
        </header>

        <!-- Main Content -->
        <main class="bg-white p-8 rounded-lg shadow-lg mt-6">
            <!-- Form Section -->
            <form id="studentForm" class="grid gap-6 md:grid-cols-2">
                <div>
                    <label for="reg_no" class="block text-sm font-semibold">Reg No:</label>
                    <input type="text" id="reg_no" class="w-full p-3 border rounded focus:ring-2 focus:ring-blue-400">
                </div>
                <div>
                    <label for="name" class="block text-sm font-semibold">Name:</label>
                    <input type="text" id="name" class="w-full p-3 border rounded focus:ring-2 focus:ring-blue-400">
                </div>
                <div>
                    <label for="age" class="block text-sm font-semibold">Age:</label>
                    <input type="number" id="age" class="w-full p-3 border rounded focus:ring-2 focus:ring-blue-400">
                </div>
                <div>
                    <label class="block text-sm font-semibold mb-2">Branch:</label>
                    <div class="flex flex-wrap gap-4">
                        <label class="flex items-center gap-2">
                            <input type="radio" name="branch" value="IT" class="focus:ring-2 focus:ring-blue-400">
                            IT
                        </label>
                        <label class="flex items-center gap-2">
                            <input type="radio" name="branch" value="CSE" class="focus:ring-2 focus:ring-blue-400">
                            CSE
                        </label>
                        <label class="flex items-center gap-2">
                            <input type="radio" name="branch" value="ECE" class="focus:ring-2 focus:ring-blue-400">
                            ECE
                        </label>
                        <label class="flex items-center gap-2">
                            <input type="radio" name="branch" value="ME" class="focus:ring-2 focus:ring-blue-400">
                            ME
                        </label>
                        <label class="flex items-center gap-2">
                            <input type="radio" name="branch" value="MEC" class="focus:ring-2 focus:ring-blue-400">
                            MEC
                        </label>
                        <label class="flex items-center gap-2">
                            <input type="radio" name="branch" value="EIE" class="focus:ring-2 focus:ring-blue-400">
                            EIE
                        </label>
                        <label class="flex items-center gap-2">
                            <input type="radio" name="branch" value="EEE" class="focus:ring-2 focus:ring-blue-400">
                            EEE
                        </label>
                    </div>
                </div>
                <div>
                    <label for="email" class="block text-sm font-semibold">Email:</label>
                    <input type="email" id="email" class="w-full p-3 border rounded focus:ring-2 focus:ring-blue-400">
                </div>
                <div>
                    <label for="phone" class="block text-sm font-semibold">Phone:</label>
                    <input type="text" id="phone" class="w-full p-3 border rounded focus:ring-2 focus:ring-blue-400">
                </div>
                <div>
                    <label for="semester" class="block text-sm font-semibold">Semester:</label>
                    <select id="semester" class="w-full p-3 border rounded focus:ring-2 focus:ring-blue-400">
                        <option value="1">First</option>
                        <option value="2">Second</option>
                        <option value="3">Third</option>
                        <option value="4">Fourth</option>
                        <option value="5">Fifth</option>
                        <option value="6">Sixth</option>
                        <option value="7">Seventh</option>
                    </select>
                </div>
            </form>

            <!-- Button Section -->
            <div class="mt-8 grid gap-4 md:grid-cols-3 lg:grid-cols-5">
                <button onclick="previousRecord()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded shadow">Previous</button>
                <button onclick="nextRecord()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded shadow">Next</button>
                <button onclick="addRecord()" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded shadow">Add</button>
                <button onclick="clearForm()" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded shadow">Clear</button>
                <button onclick="deleteRecord()" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded shadow">Delete</button>
                <button onclick="loadBuffer()" class="bg-indigo-500 hover:bg-indigo-600 text-white px-4 py-2 rounded shadow">Load Buffer</button>
                <button onclick="updateRecord()" class="bg-yellow-500 hover:bg-yellow-600 text-black px-4 py-2 rounded shadow">Update</button>
                <button onclick="insertAllRecords()" class="bg-teal-500 hover:bg-teal-600 text-white px-4 py-2 rounded shadow">Insert All</button>
                <button onclick="commitData()" class="bg-green-700 hover:bg-green-800 text-white px-4 py-2 rounded shadow">Commit</button>
            </div>
            

            <!-- Display Loaded Data -->
            <div class="mt-10">
                <h2 class="text-xl font-bold mb-4 text-center">Buffer Table Data</h2>
                <div class="overflow-x-auto">
                    <table id="bufferTable" class="w-full table-auto border-collapse border border-gray-300">
                        <thead>
                            <tr class="bg-gray-200">
                                <th class="border px-4 py-2 text-sm font-semibold">Reg No</th>
                                <th class="border px-4 py-2 text-sm font-semibold">Name</th>
                                <th class="border px-4 py-2 text-sm font-semibold">Age</th>
                                <th class="border px-4 py-2 text-sm font-semibold">Branch</th>
                                <th class="border px-4 py-2 text-sm font-semibold">Email</th>
                                <th class="border px-4 py-2 text-sm font-semibold">Phone</th>
                                <th class="border px-4 py-2 text-sm font-semibold">Semester</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Rows will be dynamically populated -->
                        </tbody>
                    </table>
                </div>
            </div>
        </main>
    </div>

    <script>
        let deletedRecords = []; // Array to store deleted record REG_NO

        let students = []; // Array to store data from buffer_students table
        let currentIndex = -1; // Tracks the current record

        function displayRecord(index) {
                    if (index >= 0 && index < students.length) {
                        const student = students[index];
                        document.getElementById('reg_no').value = student.reg_no;
                        document.getElementById('name').value = student.name;
                        document.getElementById('age').value = student.age;
                        
                        // Correctly set the branch radio button
                        const branchRadios = document.getElementsByName('branch');
                        for (let radio of branchRadios) {
                            if (radio.value === student.branch) {
                                radio.checked = true;
                                break;
                            }
                        }
                        
                        document.getElementById('email').value = student.email;
                        document.getElementById('phone').value = student.phone;
                        document.getElementById('semester').value = student.semester;
                    } else {
                        clearForm();
                    }
                }

        // Function to clear the form fields
        function clearForm() {
            document.getElementById('studentForm').reset();
        }

        function addRecord() {
    // Retrieve the selected branch value
    let branchValue = null;
    const branchOptions = document.getElementsByName("branch");
    for (const option of branchOptions) {
        if (option.checked) {
            branchValue = option.value;
            break;
        }
    }

    // Collect form data
    const student = {
        reg_no: document.getElementById('reg_no').value.trim(),
        name: document.getElementById('name').value.trim(),
        age: document.getElementById('age').value.trim(),
        branch: branchValue || '', // Use empty string if no branch selected
        email: document.getElementById('email').value.trim(),
        phone: document.getElementById('phone').value.trim(),
        semester: document.getElementById('semester').value.trim(),
    };

    // Comprehensive validation
    const requiredFields = [
        { field: 'reg_no', message: 'Registration Number' },
        { field: 'name', message: 'Name' },
        { field: 'age', message: 'Age' },
        { field: 'branch', message: 'Branch' },
        { field: 'email', message: 'Email' },
        { field: 'phone', message: 'Phone Number' },
        { field: 'semester', message: 'Semester' }
    ];

    // Check for empty fields
    const emptyFields = requiredFields.filter(f => 
        !student[f.field] || student[f.field].length === 0
    );

    if (emptyFields.length > 0) {
        alert("Please fill in the following fields:\n" + 
            emptyFields.map(f => f.message).join(', '));
        return;
    }

    // Validate registration number (assuming it should be numeric)
    if (!/^\d+$/.test(student.reg_no)) {
        alert("Registration Number must be a numeric value.");
        return;
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(student.email)) {
        alert("Please enter a valid email address.");
        return;
    }

    // Validate phone number (assuming 10 digit number)
    if (!/^\d{10}$/.test(student.phone)) {
        alert("Phone number must be 10 digits long.");
        return;
    }

    // Check for duplicate registration number
    const isDuplicate = students.some(
        existingStudent => existingStudent.reg_no === student.reg_no
    );

    if (isDuplicate) {
        alert("A record with this Registration Number already exists.");
        return;
    }

    // Add the student to the array
    students.push(student);
    
    // Update current index to the newly added record
    currentIndex = students.length - 1;
    
    // Refresh the buffer table
    populateBufferTable();
    
    // Display the newly added record
    displayRecord(currentIndex);
    
    // Optional: Clear the form after adding
    clearForm();
    
    // Provide feedback
    alert("Student record added successfully!");
}


        // Function to load buffer data from the server
        async function loadBuffer() {
            const response = await fetch('/load_data', { method: 'POST' });
            if (response.ok) {
                const dataResponse = await fetch('/fetch_buffer'); // Endpoint to fetch buffer data
                students = await dataResponse.json(); // Load data into array
                currentIndex = students.length > 0 ? 0 : -1;
                populateBufferTable(); // Populate the table
                alert("Buffer data loaded successfully!");
                if (students.length > 0) displayRecord(currentIndex); // Display the first record
            } else {
                alert("Failed to load buffer data.");
            }
        }

        // Function to populate the buffer table
        function populateBufferTable() {
            const tableBody = document.querySelector("#bufferTable tbody");
            tableBody.innerHTML = ""; // Clear existing rows
            students.forEach((student) => {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td class="border px-4 py-2">${student.reg_no}</td>
                    <td class="border px-4 py-2">${student.name}</td>
                    <td class="border px-4 py-2">${student.age}</td>
                    <td class="border px-4 py-2">${student.branch}</td>
                    <td class="border px-4 py-2">${student.email}</td>
                    <td class="border px-4 py-2">${student.phone}</td>
                    <td class="border px-4 py-2">${student.semester}</td>
                `;
                tableBody.appendChild(row);
            });
        }
// Update the current record in the array
function updateRecord() {
    if (currentIndex >= 0 && currentIndex < students.length) {
        // Retrieve the selected branch value
        let branchValue = null;
        const branchOptions = document.getElementsByName("branch");
        for (const option of branchOptions) {
            if (option.checked) {
                branchValue = option.value;
                break;
            }
        }

        if (!branchValue) {
            alert("Please select a branch.");
            return;
        }

        // Update the record
        students[currentIndex] = {
            reg_no: document.getElementById("reg_no").value.trim(),
            name: document.getElementById("name").value.trim(),
            age: document.getElementById("age").value.trim(),
            branch: branchValue,
            email: document.getElementById("email").value.trim(),
            phone: document.getElementById("phone").value.trim(),
            semester: document.getElementById("semester").value.trim(),
        };

        populateBufferTable(); // Refresh the buffer table
        alert("Record updated successfully.");
    } else {
        alert("No record selected for updating.");
    }
}
function updateRecord() {
    if (currentIndex >= 0 && currentIndex < students.length) {
        // Retrieve the selected branch value
        let branchValue = null;
        const branchOptions = document.getElementsByName("branch");
        for (const option of branchOptions) {
            if (option.checked) {
                branchValue = option.value;
                break;
            }
        }

        if (!branchValue) {
            alert("Please select a branch.");
            return;
        }

        // Update the record
        students[currentIndex] = {
            reg_no: document.getElementById("reg_no").value.trim(),
            name: document.getElementById("name").value.trim(),
            age: document.getElementById("age").value.trim(),
            branch: branchValue,
            email: document.getElementById("email").value.trim(),
            phone: document.getElementById("phone").value.trim(),
            semester: document.getElementById("semester").value.trim(),
        };

        populateBufferTable(); // Refresh the buffer table
        alert("Record updated successfully.");
    } else {
        alert("No record selected for updating.");
    }
}


// Insert all records into buffer_students
async function insertAllRecords() {
    const response = await fetch('/insert_or_update_buffer', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(students),
    });

    alert(await response.text());
}

// Commit all buffer records to students_s
async function commitData() {
    const response = await fetch('/commit_data', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            deleted_records: deletedRecords, // Send deleted records
        }),
    });

    alert(await response.text());
    // Clear the deleted records array after committing
    deletedRecords = [];
}

        // Navigate to the previous record
        function previousRecord() {
            if (currentIndex > 0) {
                currentIndex--;
                displayRecord(currentIndex);
            } else {
                alert("No previous records.");
            }
        }

        // Navigate to the next record
        function nextRecord() {
            if (currentIndex < students.length - 1) {
                currentIndex++;
                displayRecord(currentIndex);
            } else {
                alert("No more records.");
            }
        }

        async function deleteRecord() {
    if (currentIndex >= 0 && currentIndex < students.length) {
        const studentToDelete = students[currentIndex];
        
        try {
            // First, attempt to delete from the database buffer table
            const deleteResponse = await fetch('/delete_record', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ reg_no: studentToDelete.reg_no })
            });

            if (!deleteResponse.ok) {
                throw new Error('Failed to delete record from buffer');
            }

            // Remove the record from the local students array
            students.splice(currentIndex, 1);
            
            // Add to deletedRecords for main students table deletion during commit
            deletedRecords.push(studentToDelete.reg_no);

            // Refresh the buffer table
            populateBufferTable();

            // Adjust the index after deletion
            if (students.length === 0) {
                currentIndex = -1;
                clearForm();
                alert("Record deleted successfully. No more records.");
            } else if (currentIndex >= students.length) {
                currentIndex = students.length - 1;
                displayRecord(currentIndex);
                alert("Record deleted successfully. Showing last record.");
            } else {
                displayRecord(currentIndex);
                alert("Record deleted successfully.");
            }
        } catch (error) {
            console.error('Deletion error:', error);
            alert('Failed to delete record: ' + error.message);
        }
    } else {
        alert("No record to delete.");
    }
}

    </script>
</body>
</html>







Now, You have to do some modifications in these codes. Add a button 'insert' to add a record in the current form directly into bufferstudents table. and add a button 'fetch' to fetch particular record according to register number, if i enter reg.no in form and tap fetch button, it should fetch that particular record. 